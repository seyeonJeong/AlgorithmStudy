from itertools import combinations
import sys

input = sys.stdin.readline

n,k = map(int,input().split())

answer = 0

# a,n,t,i,c 는 반드시 알고 있어야 한다.
base_word = {'a','n','t','i','c'}
data = []
# 중복을 제외하고 base_word를 뺀 나머지 알파벳을 구한다.
rem = set(chr(i) for i in range(97,123)) - base_word

for _ in range(n):
    data.append(input().rstrip('\n')[4:-4])

def check_word(learned, data):
    cnt = 0
    
    
    # 모든 단어를 순회하며 확인한다.
    for word in data:
        can_read = 1
        for w in word:
            # 만약 비트마스킹 되어지지 않은 글자가 나온다면, 이 단어는 읽을 수 없다.
            if learned[ord(w)] == 0:
                can_read = 0
                break
        # 만약 다 읽을 수 있다면 cnt를 +1
        if can_read == 1:
            cnt += 1
    return cnt
    
# k가 5보다 작으면 아예 읽을 수 있는 단어가 없다.
if k >= 5:
    # 123개인 이유는 그냥 ord()를 하면 소문자 최대가 123이기 때문
    learned = [0] * 123
    
    # 일단 base_word들은 다 배운 것으로 친다.
    for x in base_word:
        learned[ord(x)] = 1
    
    # k-5개의 알파벳 조합을 구해서 비트마스킹한다.
    for teach in list(combinations(rem,k-5)):
        for t in teach:
            learned[ord(t)] = 1
            
        cnt = check_word(learned, data)
        
        # 다시 0으로 되돌려 준다. (다음 조합에서 확인하기 위해 초기화)
        for t in teach:
            learned[ord(t)] = 0
        
        # 하나의 조합에서 answer보다 큰 값이 나오면 그게 현재 최대값이다.
        if cnt > answer:
            answer = cnt
            
    # 모든 조합을 다 확인 한 후 정답을 출력한다.   
    print(answer)

else:
    print(0)
        
        
        
    
        
        
    
    
