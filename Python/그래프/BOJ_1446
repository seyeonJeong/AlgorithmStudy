import heapq

INF = int(1e9)


def dijkstra(start):
    q = []
    heapq.heappush(q,(0,start))
    distance[start] = 0
    while q:
        dist,now = heapq.heappop(q)

        if dist > distance[now]:
            continue

        for i in graph[now]:
            cost = dist + i[1]
            if distance[i[0]] > cost:
                distance[i[0]] = cost
                heapq.heappush(q,(cost,i[0]))




N,D = map(int, input().split())

graph = [[] for _ in range(D+1)]

for i in range(D):
    graph[i].append((i+1,1))

for i in range(N):
    s,e,l = map(int,input().split())
    if e > D:
        continue
    graph[s].append((e,l))


distance = [INF] * (D+1)

dijkstra(0)
print(distance[D])
